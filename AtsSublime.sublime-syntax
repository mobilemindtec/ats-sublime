%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
name: ATS LANG
file_extensions:
  - dats 
  - sats
  - hats
scope: source.dats

variables:

  block_comment_contents: (?:(?:[^*]|\*(?!/))*)
  block_comment: (?:\(\*{{block_comment_contents}}\*\))
  nothing: (?:(?:\s|{{block_comment}})*)
  line_ending_ahead: (?={{nothing}}(?:/\*{{block_comment_contents}}|//.*)?$)


contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.dats
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.dats
      push: line_comment

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(case,case+,case-,in,let,val,fix,fnx,extern,implement,if,else,then,end,exception,where,lam,local,Keyword,absprop,abstype,absview,absviewtype,absvtype,addr@,assertloc,castfn,dataprop,datatype,dataview,dataviewtype,datavtype,dynloadextern,fn,fun,infix,infixr,infixl,implement,of,overload,postfix,prefixprimplement,primplmnt,propdef,sif,sta,stadef,val,staload,symintr,tkindef,typedef,val,val-,val+,var,view@,viewdef,viewtypedef,with,withtype)\b'
      scope: keyword.control.dats

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.dats

  double_quoted_string:
    - meta_scope: string.quoted.double.dats
    - match: '\\.'
      scope: constant.character.escape.dats
    - match: '"'
      scope: punctuation.definition.string.end.dats
      pop: true

  line_comment:
    - meta_scope: comment.line.dats
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.line.dats
    - match: $
      pop: true
